// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`posix support accessSync check owned file cannot be read 1`] = `"EPERM: \`/foo.txt\`: file cannot be read"`;

exports[`posix support accessSync check owned file cannot be written to 1`] = `"EPERM: \`/foo.txt\`: file cannot be written to"`;

exports[`posix support linkSync errors when source is a directory directory -> empty directory 1`] = `"EPERM: \`/source\`: cannot create a hard link to a directory"`;

exports[`posix support linkSync errors when source is a directory directory -> file 1`] = `"EPERM: \`/source\`: cannot create a hard link to a directory"`;

exports[`posix support linkSync errors when source is a directory directory -> itself 1`] = `"EPERM: \`/source\`: cannot create a hard link to a directory"`;

exports[`posix support linkSync errors when source is a directory directory -> non-empty directory 1`] = `"EPERM: \`/source\`: cannot create a hard link to a directory"`;

exports[`posix support linkSync errors when source is a directory directory -> symbolic link 1`] = `"EPERM: \`/source\`: cannot create a hard link to a directory"`;

exports[`posix support linkSync errors when the destination is in a nonexistent directory 1`] = `"ENOENT: \`/bad/dest\`: no such file or directory"`;

exports[`posix support linkSync errors when the source does not exist 1`] = `"ENOENT: \`/source\`: no such file or directory"`;

exports[`posix support linkSync errors when using a file as a directory in the destination path 1`] = `"ENOTDIR: \`/dest/nope\`: not a directory"`;

exports[`posix support linkSync errors when using a file as a directory in the source path 1`] = `"ENOTDIR: \`/source/nope\`: not a directory"`;

exports[`posix support linkSync never overwrites the destination file -> directory 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination file -> file 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination file -> itself 1`] = `"EEXIST: \`/source\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination file -> symbolic link 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination symbolic link -> directory 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination symbolic link -> file 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination symbolic link -> itself 1`] = `"EEXIST: \`/source\`: destination path already exists"`;

exports[`posix support linkSync never overwrites the destination symbolic link -> symbolic link 1`] = `"EEXIST: \`/dest\`: destination path already exists"`;

exports[`posix support readlink throws when trying to read a regular file 1`] = `"EINVAL: \`/foo.txt\`: entity is not a symlink"`;

exports[`posix support renameSync errors when making a directory its own subdirectory 1`] = `"EINVAL: \`/source/subdir\`: cannot make a directory a subdirectory of itself"`;

exports[`posix support renameSync errors when the destination is in a nonexistent directory 1`] = `"ENOENT: \`/bad/dest\`: no such file or directory"`;

exports[`posix support renameSync errors when the source does not exist 1`] = `"ENOENT: \`/source\`: no such file or directory"`;

exports[`posix support renameSync errors when using a file as a directory in the destination path 1`] = `"ENOTDIR: \`/dest/nope\`: not a directory"`;

exports[`posix support renameSync errors when using a file as a directory in the source path 1`] = `"ENOTDIR: \`/source/nope\`: not a directory"`;

exports[`posix support renameSync when the source is valid and the destination exists directory -> file errors 1`] = `"EISDIR: \`/dest\`: cannot overwrite a directory with a non-directory"`;

exports[`posix support renameSync when the source is valid and the destination exists directory -> non-empty directory errors 1`] = `"ENOTEMPTY: \`/dest\`: directory not empty"`;

exports[`posix support renameSync when the source is valid and the destination exists directory -> symbolic link errors 1`] = `"EISDIR: \`/dest\`: cannot overwrite a directory with a non-directory"`;

exports[`posix support supports COPYFILE_EXCL for copyFile 1`] = `"EEXIST: \`/dest-file\`: directory or file already exists"`;

exports[`posix support throws when finding a symlink loop 1`] = `"ELOOP: \`/foo.txt\`: too many levels of symbolic links"`;

exports[`posix support throws when trying to create symlink over existing file 1`] = `"EEXIST: \`/foo.txt\`: directory or file already exists"`;

exports[`posix support throws when trying to open too many files 1`] = `"EMFILE: \`/foo.txt\`: too many open files"`;

exports[`posix support throws when trying to read a directory entry 1`] = `"EISDIR: \`/glo\`: cannot read/write to a directory"`;

exports[`posix support throws when trying to read directory as file 1`] = `"EISDIR: \`/glo\`: cannot read/write to a directory"`;

exports[`posix support throws when trying to read file via inexistent directory 1`] = `"ENOENT: \`/glo/../foo.txt\`: no such file or directory"`;

exports[`posix support throws when trying to read file with trailing slash 1`] = `"ENOTDIR: \`/foo.txt/\`: not a directory"`;

exports[`posix support throws when trying to read inexistent file (async) 1`] = `"ENOENT: \`/foo.txt\`: no such file or directory"`;

exports[`posix support throws when trying to read inexistent file 1`] = `"ENOENT: \`/foo.txt\`: no such file or directory"`;

exports[`posix support throws when trying to write a directory entry 1`] = `"EISDIR: \`/glo\`: cannot read/write to a directory"`;

exports[`posix support throws when trying to write to a read-only file descriptor 1`] = `"EBADF: file descriptor cannot be written to"`;

exports[`posix support throws when trying to write to a win32-style path 1`] = `"ENOENT: \`C:\\\\foo.txt\`: no such file or directory"`;

exports[`posix support throws when trying to write to an inexistent file descriptor 1`] = `"EBADF: file descriptor is not open"`;

exports[`posix support truncateSync errors on truncating a directory 1`] = `"EISDIR: \`/foo\`: cannot read/write to a directory"`;

exports[`posix support truncateSync with file descriptor errors on a closed file descriptor 1`] = `"EBADF: file descriptor is not open"`;

exports[`posix support truncateSync with file descriptor errors on a nonexistent file descriptor 1`] = `"EBADF: file descriptor is not open"`;

exports[`posix support truncateSync with file descriptor errors on truncating a a non-writable file 1`] = `"EBADF: file descriptor cannot be written to"`;
