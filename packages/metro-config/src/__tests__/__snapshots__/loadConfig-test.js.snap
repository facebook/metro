// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loadConfig can load config objects 1`] = `
Object {
  "cacheStores": Array [],
  "cacheVersion": "1.0",
  "maxWorkers": 2,
  "projectRoot": "/",
  "reporter": null,
  "resetCache": false,
  "resolver": Object {
    "allowPnp": true,
    "assetExts": Array [
      "bmp",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "psd",
      "svg",
      "webp",
      "m4v",
      "mov",
      "mp4",
      "mpeg",
      "mpg",
      "webm",
      "aac",
      "aiff",
      "caf",
      "m4a",
      "mp3",
      "wav",
      "html",
      "json",
      "pdf",
      "yaml",
      "yml",
      "otf",
      "ttf",
      "zip",
    ],
    "blacklistRE": /\\(node_modules\\[\\\\/\\\\\\\\\\]react\\[\\\\/\\\\\\\\\\]dist\\[\\\\/\\\\\\\\\\]\\.\\*\\|website\\\\/node_modules\\\\/\\.\\*\\|heapCapture\\\\/bundle\\\\\\.js\\|\\.\\*\\\\/__tests__\\\\/\\.\\*\\)\\$/,
    "extraNodeModules": Object {},
    "hasteImplModulePath": undefined,
    "platforms": Array [
      "ios",
      "android",
      "windows",
      "web",
    ],
    "providesModuleNodeModules": Array [
      "react-native",
      "react-native-windows",
    ],
    "resolveRequest": null,
    "resolverMainFields": Array [
      "browser",
      "main",
    ],
    "sourceExts": Array [
      "js",
      "json",
      "ts",
      "tsx",
    ],
    "useWatchman": true,
    "virtualMapper": [Function],
  },
  "serializer": Object {
    "createModuleIdFactory": [Function],
    "customSerializer": null,
    "experimentalSerializerHook": [Function],
    "getModulesRunBeforeMainModule": [Function],
    "getPolyfills": [Function],
    "getRunModuleStatement": [Function],
    "polyfillModuleNames": Array [],
    "postProcessBundleSourcemap": [Function],
    "processModuleFilter": [Function],
  },
  "server": Object {
    "enableVisualizer": false,
    "enhanceMiddleware": [Function],
    "port": 8080,
    "runInspectorProxy": false,
    "useGlobalHotkey": true,
    "verifyConnections": false,
  },
  "stickyWorkers": true,
  "transformer": Object {
    "assetPlugins": Array [],
    "assetRegistryPath": "missing-asset-registry-path",
    "asyncRequireModulePath": "metro/src/lib/bundle-modules/asyncRequire",
    "babelTransformerPath": "metro-babel-transformer",
    "dynamicDepsInPackages": "throwAtRuntime",
    "enableBabelRCLookup": true,
    "enableBabelRuntime": true,
    "getTransformOptions": [Function],
    "minifierConfig": Object {
      "compress": Object {
        "reduce_funcs": false,
      },
      "mangle": Object {
        "toplevel": false,
      },
      "output": Object {
        "ascii_only": true,
        "quote_style": 3,
        "wrap_iife": true,
      },
      "sourceMap": Object {
        "includeSources": false,
      },
      "toplevel": false,
    },
    "minifierPath": "metro-minify-uglify",
    "optimizationSizeLimit": 153600,
    "postMinifyProcess": [Function],
    "publicPath": "/assets",
    "transformVariants": Object {
      "default": Object {},
    },
    "workerPath": "metro/src/DeltaBundler/Worker",
  },
  "transformerPath": "",
  "visualizer": Object {
    "presets": Array [],
  },
  "watchFolders": Array [
    "/",
  ],
}
`;

exports[`loadConfig can load the config with a path 1`] = `
Object {
  "cacheStores": Array [],
  "cacheVersion": "1.0",
  "maxWorkers": 2,
  "projectRoot": "/",
  "reporter": null,
  "resetCache": false,
  "resolver": Object {
    "allowPnp": true,
    "assetExts": Array [
      "bmp",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "psd",
      "svg",
      "webp",
      "m4v",
      "mov",
      "mp4",
      "mpeg",
      "mpg",
      "webm",
      "aac",
      "aiff",
      "caf",
      "m4a",
      "mp3",
      "wav",
      "html",
      "json",
      "pdf",
      "yaml",
      "yml",
      "otf",
      "ttf",
      "zip",
    ],
    "blacklistRE": /\\(node_modules\\[\\\\/\\\\\\\\\\]react\\[\\\\/\\\\\\\\\\]dist\\[\\\\/\\\\\\\\\\]\\.\\*\\|website\\\\/node_modules\\\\/\\.\\*\\|heapCapture\\\\/bundle\\\\\\.js\\|\\.\\*\\\\/__tests__\\\\/\\.\\*\\)\\$/,
    "extraNodeModules": Object {},
    "hasteImplModulePath": undefined,
    "platforms": Array [
      "ios",
      "android",
      "windows",
      "web",
    ],
    "providesModuleNodeModules": Array [
      "react-native",
      "react-native-windows",
    ],
    "resolveRequest": null,
    "resolverMainFields": Array [
      "browser",
      "main",
    ],
    "sourceExts": Array [
      "js",
      "json",
      "ts",
      "tsx",
    ],
    "useWatchman": true,
    "virtualMapper": [Function],
  },
  "serializer": Object {
    "createModuleIdFactory": [Function],
    "customSerializer": null,
    "experimentalSerializerHook": [Function],
    "getModulesRunBeforeMainModule": [Function],
    "getPolyfills": [Function],
    "getRunModuleStatement": [Function],
    "polyfillModuleNames": Array [],
    "postProcessBundleSourcemap": [Function],
    "processModuleFilter": [Function],
  },
  "server": Object {
    "enableVisualizer": false,
    "enhanceMiddleware": [Function],
    "port": 8080,
    "runInspectorProxy": false,
    "useGlobalHotkey": true,
    "verifyConnections": false,
  },
  "stickyWorkers": true,
  "transformer": Object {
    "assetPlugins": Array [],
    "assetRegistryPath": "missing-asset-registry-path",
    "asyncRequireModulePath": "metro/src/lib/bundle-modules/asyncRequire",
    "babelTransformerPath": "metro-babel-transformer",
    "dynamicDepsInPackages": "throwAtRuntime",
    "enableBabelRCLookup": true,
    "enableBabelRuntime": true,
    "getTransformOptions": [Function],
    "minifierConfig": Object {
      "compress": Object {
        "reduce_funcs": false,
      },
      "mangle": Object {
        "toplevel": false,
      },
      "output": Object {
        "ascii_only": true,
        "quote_style": 3,
        "wrap_iife": true,
      },
      "sourceMap": Object {
        "includeSources": false,
      },
      "toplevel": false,
    },
    "minifierPath": "metro-minify-uglify",
    "optimizationSizeLimit": 153600,
    "postMinifyProcess": [Function],
    "publicPath": "/assets",
    "transformVariants": Object {
      "default": Object {},
    },
    "workerPath": "metro/src/DeltaBundler/Worker",
  },
  "transformerPath": "",
  "visualizer": Object {
    "presets": Array [],
  },
  "watchFolders": Array [
    "/",
  ],
}
`;

exports[`loadConfig validates config for projectRoot 1`] = `
"● Validation Error:

  Option \\"projectRoot\\" must be of type:
    string
  but instead received:
    array

  Example:
  {
    \\"projectRoot\\": \\"/path/to/project\\"
  }
"
`;

exports[`loadConfig validates config for resolver 1`] = `
"● Validation Error:

  Option \\"resolver\\" must be of type:
    object
  but instead received:
    string

  Example:
  {
    \\"resolver\\": {
      \\"allowPnp\\": true,
      \\"assetExts\\": [
        \\"bmp\\",
        \\"gif\\",
        \\"jpg\\",
        \\"jpeg\\",
        \\"png\\",
        \\"psd\\",
        \\"svg\\",
        \\"webp\\",
        \\"m4v\\",
        \\"mov\\",
        \\"mp4\\",
        \\"mpeg\\",
        \\"mpg\\",
        \\"webm\\",
        \\"aac\\",
        \\"aiff\\",
        \\"caf\\",
        \\"m4a\\",
        \\"mp3\\",
        \\"wav\\",
        \\"html\\",
        \\"json\\",
        \\"pdf\\",
        \\"yaml\\",
        \\"yml\\",
        \\"otf\\",
        \\"ttf\\",
        \\"zip\\"
      ],
      \\"platforms\\": [
        \\"ios\\",
        \\"android\\",
        \\"windows\\",
        \\"web\\"
      ],
      \\"sourceExts\\": [
        \\"js\\",
        \\"json\\",
        \\"ts\\",
        \\"tsx\\"
      ],
      \\"providesModuleNodeModules\\": [
        \\"react-native\\",
        \\"react-native-windows\\"
      ],
      \\"resolverMainFields\\": [
        \\"browser\\",
        \\"main\\"
      ],
      \\"extraNodeModules\\": {},
      \\"hasteImplModulePath\\": \\"./path\\",
      \\"blacklistRE\\": {},
      \\"useWatchman\\": true
    }
  }
"
`;

exports[`loadConfig validates config for server 1`] = `
"● Validation Error:

  Option \\"server.useGlobalHotkey\\" must be of type:
    boolean
  but instead received:
    string

  Example:
  {
    \\"useGlobalHotkey\\": true
  }
"
`;

exports[`loadConfig validates config for transformer 1`] = `
"● Validation Error:

  Option \\"transformer.enableBabelRuntime\\" must be of type:
    boolean
  but instead received:
    number

  Example:
  {
    \\"enableBabelRuntime\\": true
  }
"
`;
