// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comparing basic types 1`] = `
"
    left-type:
      boolean
    right-type:
      boolean
    output:
      no errors"
`;

exports[`comparing basic types 2`] = `
"
    left-type:
      string
    right-type:
      string
    output:
      no errors"
`;

exports[`comparing basic types 3`] = `
"
    left-type:
      number
    right-type:
      number
    output:
      no errors"
`;

exports[`comparing basic types 4`] = `
"
    left-type:
      void
    right-type:
      void
    output:
      no errors"
`;

exports[`comparing basic types 5`] = `
"
    left-type:
      boolean
    right-type:
      number
    output:
      Error: cannot change boolean to number because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 6`] = `
"
    left-type:
      'a'
    right-type:
      'a'
    output:
      no errors"
`;

exports[`comparing basic types 7`] = `
"
    left-type:
      'a'
    right-type:
      'b'
    output:
      Error: cannot change string literal with value 'a' to string literal with value 'b' because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 8`] = `
"
    left-type:
      8
    right-type:
      8
    output:
      no errors"
`;

exports[`comparing basic types 9`] = `
"
    left-type:
      2
    right-type:
      8
    output:
      Error: cannot change number literal with value '2' to number literal with value '8' because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 10`] = `
"
    left-type:
      2
    right-type:
      number
    output:
      Error: cannot change number literal to number because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 11`] = `
"
    left-type:
      number
    right-type:
      2
    output:
      no errors"
`;

exports[`comparing basic types 12`] = `
"
    left-type:
      string
    right-type:
      'a'
    output:
      no errors"
`;

exports[`comparing basic types 13`] = `
"
    left-type:
      'a'
    right-type:
      string
    output:
      Error: cannot change string literal to string because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 14`] = `
"
    left-type:
      true
    right-type:
      true
    output:
      no errors"
`;

exports[`comparing basic types 15`] = `
"
    left-type:
      true
    right-type:
      false
    output:
      Error: cannot change boolean literal with value 'true' to boolean literal with value 'false' because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 16`] = `
"
    left-type:
      string
    right-type:
      ?string
    output:
      Error: cannot change string to nullable string because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 17`] = `
"
    left-type:
      ?number
    right-type:
      number
    output:
      no errors"
`;

exports[`comparing basic types 18`] = `
"
    left-type:
      ?boolean
    right-type:
      true
    output:
      no errors"
`;

exports[`comparing basic types 19`] = `
"
    left-type:
      ?string
    right-type:
      ?string
    output:
      no errors"
`;

exports[`comparing basic types 20`] = `
"
    left-type:
      ?string
    right-type:
      ?'foo'
    output:
      no errors"
`;

exports[`comparing basic types 21`] = `
"
    left-type:
      ?string
    right-type:
      ?number
    output:
      Error: cannot change string to number because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 22`] = `
"
    left-type:
      null
    right-type:
      null
    output:
      no errors"
`;

exports[`comparing basic types 23`] = `
"
    left-type:
      ?string
    right-type:
      null
    output:
      no errors"
`;

exports[`comparing basic types 24`] = `
"
    left-type:
      ?boolean
    right-type:
      void
    output:
      no errors"
`;

exports[`comparing basic types 25`] = `
"
    left-type:
      () => boolean
    right-type:
      () => ?boolean
    output:
      no errors"
`;

exports[`comparing basic types 26`] = `
"
    left-type:
      () => ?boolean
    right-type:
      () => boolean
    output:
      Error: cannot change nullable boolean to boolean because is incompatible with what the native code returns.
  		"
`;

exports[`comparing basic types 27`] = `
"
    left-type:
      () => true
    right-type:
      () => boolean
    output:
      no errors"
`;

exports[`comparing basic types 28`] = `
"
    left-type:
      (test: ?boolean) => true
    right-type:
      (test: boolean) => true
    output:
      no errors"
`;

exports[`comparing basic types 29`] = `
"
    left-type:
      (test?: string) => void
    right-type:
      () => void
    output:
      no errors"
`;

exports[`comparing basic types 30`] = `
"
    left-type:
      (test: string) => void
    right-type:
      () => void
    output:
      Error: cannot remove required parameter string because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 31`] = `
"
    left-type:
      () => void
    right-type:
      (test?: string) => void
    output:
      no errors"
`;

exports[`comparing basic types 32`] = `
"
    left-type:
      () => void
    right-type:
      (test?: string, test2: number) => void
    output:
      Error: cannot add new required parameter number because native will not provide it.
  		"
`;

exports[`comparing basic types 33`] = `
"
    left-type:
      (test?: boolean) => true
    right-type:
      (test?: string) => true
    output:
      Error: cannot change boolean to string because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 34`] = `
"
    left-type:
      (test: string) => ?true
    right-type:
      () => void
    output:
      Error: cannot change nullable boolean literal to void because is incompatible with what the native code returns.
  		Error: cannot remove required parameter string because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 35`] = `
"
    left-type:
      {name: string, age: ?number }
    right-type:
      {name: string, age: number }
    output:
      no errors"
`;

exports[`comparing basic types 36`] = `
"
    left-type:
      {name: string, age: number }
    right-type:
      {name: string, age?: number }
    output:
      Error: cannot change required number to optional number because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 37`] = `
"
    left-type:
      {name: string, age: number }
    right-type:
      {name: string}
    output:
      Error: cannot remove number from object properties because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 38`] = `
"
    left-type:
      {name: string, age?: number }
    right-type:
      {name: string}
    output:
      no errors"
`;

exports[`comparing basic types 39`] = `
"
    left-type:
      {name: string}
    right-type:
      {name: string, ...}
    output:
      no errors"
`;

exports[`comparing basic types 40`] = `
"
    left-type:
      {name: string}
    right-type:
      {name: string, age: number}
    output:
      Error: cannot add number to object properties because native code will break when js calls it.
  		"
`;

exports[`comparing basic types 41`] = `
"
    left-type:
      {name: string}
    right-type:
      {name: string, age?: number}
    output:
      no errors"
`;

exports[`comparing basic types 42`] = `
"
    left-type:
      () => {name: string, age?: number }
    right-type:
      () => {name: string}
    output:
      no errors"
`;

exports[`comparing basic types 43`] = `
"
    left-type:
      () => {name: string, age: number }
    right-type:
      () => {name: string}
    output:
      Error: cannot remove number from object properties because it is incompatible with what the native code returns.
  		"
`;

exports[`comparing basic types 44`] = `
"
    left-type:
      () => {name: string}
    right-type:
      () => {name: string, age: number}
    output:
      Error: cannot add number to object properties because it is incompatible with what the native code returns.
  		"
`;

exports[`comparing basic types 45`] = `
"
    left-type:
      () => {name: string}
    right-type:
      () => {name: string, age: ?number}
    output:
      Error: cannot add nullable number to object properties because it is incompatible with what the native code returns.
  		"
`;
