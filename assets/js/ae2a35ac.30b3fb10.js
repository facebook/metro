"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[5430],{44913:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"package-exports","title":"Package Exports Support (New)","description":"Background","source":"@site/../docs/PackageExports.md","sourceDirName":".","slug":"/package-exports","permalink":"/docs/package-exports","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/metro/edit/main/docs/../docs/PackageExports.md","tags":[],"version":"current","lastUpdatedAt":1756820629000,"frontMatter":{"id":"package-exports","title":"Package Exports Support (New)"},"sidebar":"docs","previous":{"title":"Metro CLI Options","permalink":"/docs/cli"},"next":{"title":"Troubleshooting","permalink":"/docs/troubleshooting"}}');var o=n(74848),t=n(28453);const r={id:"package-exports",title:"Package Exports Support (New)"},a=void 0,c={},l=[{value:"Background",id:"background",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"How Metro applies <code>import</code>/<code>require</code> exports conditions",id:"how-metro-applies-importrequire-exports-conditions",level:2},{value:"Summary of breaking changes",id:"summary-of-breaking-changes",level:2},{value:"Breaking: If an <code>&quot;exports&quot;</code> match is found, it is preferred",id:"breaking-if-an-exports-match-is-found-it-is-preferred",level:3},{value:"Example",id:"example",level:4},{value:"Breaking: Match <code>&quot;exports&quot;</code> first, then fall back to legacy resolution",id:"breaking-match-exports-first-then-fall-back-to-legacy-resolution",level:3},{value:"Example",id:"example-1",level:4},{value:"Breaking: Import specifiers are matched exactly",id:"breaking-import-specifiers-are-matched-exactly",level:3},{value:"Example",id:"example-2",level:4},{value:"Package encapsulation is lenient",id:"package-encapsulation-is-lenient",level:3},{value:"Migration guide for package maintainers",id:"migration-guide-for-package-maintainers",level:2},{value:"Recommended: Introducing <code>&quot;exports&quot;</code> is a breaking change",id:"recommended-introducing-exports-is-a-breaking-change",level:3},{value:"Package subpaths",id:"package-subpaths",level:3},{value:"File extensions are important!",id:"file-extensions-are-important",level:4},{value:"Subpath patterns do not permit expansion",id:"subpath-patterns-do-not-permit-expansion",level:4},{value:"Replacing <code>&quot;browser&quot;</code> and <code>&quot;react-native&quot;</code> fields",id:"replacing-browser-and-react-native-fields",level:3},{value:"Example: Use conditional exports to target web and React Native",id:"example-use-conditional-exports-to-target-web-and-react-native",level:4},{value:"Replacing platform-specific extensions",id:"replacing-platform-specific-extensions",level:3},{value:"Use <code>Platform.select()</code> (React Native)",id:"use-platformselect-react-native",level:4},{value:"Asset files",id:"asset-files",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Package/ESM incompatibilites",id:"packageesm-incompatibilites",level:3},{value:"Example: Custom resolver",id:"example-custom-resolver",level:4},{value:"Previous Metro bugs",id:"previous-metro-bugs",level:4}];function d(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"background",children:"Background"}),"\n",(0,o.jsxs)(s.p,{children:["Introduced in Node.js 12.7.0, Package Exports is a modern approach for npm packages to specify ",(0,o.jsx)(s.strong,{children:"entry points"})," \u2014 the mapping of package subpaths which can be externally imported and which file(s) they should resolve to, via the ",(0,o.jsx)(s.code,{children:"exports"})," field in ",(0,o.jsx)(s.code,{children:"package.json"})," files."]}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"exports"})," also supports different targets for a given subpath dependent on ",(0,o.jsx)(s.a,{href:"https://nodejs.org/api/packages.html#conditional-exports",children:(0,o.jsx)(s.em,{children:"conditions"})}),", such as whether building for a browser or Node.js, and whether ",(0,o.jsx)(s.code,{children:"import"})," or ",(0,o.jsx)(s.code,{children:"require"})," is used by the consumer."]}),"\n",(0,o.jsxs)(s.p,{children:["Package Exports support has been enabled by default in Metro since ",(0,o.jsx)(s.a,{href:"https://github.com/facebook/metro/releases/tag/v0.82.0",children:"0.82"})," (or React Native 0.79)."]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#package-entry-points",children:"Node.js spec"})}),"\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0534-metro-package-exports-support.md",children:"RFC for Package Exports in Metro"})}),"\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://reactnative.dev/blog/2025/04/08/react-native-0.79#metro-faster-startup-and-package-exports-support",children:"React Native 0.79 release blog"})}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,o.jsxs)(s.table,{children:[(0,o.jsx)(s.thead,{children:(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.th,{children:"Option"}),(0,o.jsx)(s.th,{children:"Description"})]})}),(0,o.jsxs)(s.tbody,{children:[(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.a,{href:"/docs/configuration/#unstable_enablepackageexports-experimental",children:(0,o.jsx)(s.code,{children:"resolver.unstable_enablePackageExports"})})}),(0,o.jsx)(s.td,{children:"Enable/disable Package Exports support."})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.a,{href:"/docs/configuration/#unstable_conditionnames-experimental",children:(0,o.jsx)(s.code,{children:"resolver.unstable_conditionNames"})})}),(0,o.jsx)(s.td,{children:"The set of condition names to assert when resolving conditional exports."})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.a,{href:"/docs/configuration/#unstable_conditionsbyplatform-experimental",children:(0,o.jsx)(s.code,{children:"resolver.unstable_conditionsByPlatform"})})}),(0,o.jsx)(s.td,{children:"The additional condition names to assert when resolving for a given platform target."})]})]})]}),"\n",(0,o.jsxs)(s.h2,{id:"how-metro-applies-importrequire-exports-conditions",children:["How Metro applies ",(0,o.jsx)(s.code,{children:"import"}),"/",(0,o.jsx)(s.code,{children:"require"})," exports conditions"]}),"\n",(0,o.jsxs)(s.p,{children:["Like Node.js, Metro will always assert ",(0,o.jsx)(s.code,{children:"'import'"})," or ",(0,o.jsx)(s.code,{children:"'require'"})," condition, but never both. It does that based on whether the dependency being resolved uses ",(0,o.jsx)(s.code,{children:"import"})," (or ",(0,o.jsx)(s.code,{children:"await import()"}),"), vs ",(0,o.jsx)(s.code,{children:"require()"})," in your source file."]}),"\n",(0,o.jsxs)(s.p,{children:["Unlike Node.js, Metro allows ",(0,o.jsx)(s.code,{children:"import .. from"})," and ",(0,o.jsx)(s.code,{children:"require()"})," to appear in the same file. So if you need the CommonJS version of a dependency, you may simply change the ",(0,o.jsx)(s.code,{children:"import"})," to a ",(0,o.jsx)(s.code,{children:"require()"}),"."]}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["Metro does this by collecting the source locations of your ",(0,o.jsx)(s.code,{children:"import"}),"s before any transforms, applying transforms that convert ",(0,o.jsx)(s.code,{children:"import"}),"s to ",(0,o.jsx)(s.code,{children:"require"}),"s for bundling, and then checking whether a ",(0,o.jsx)(s.code,{children:"require"})," is source mapped to what used to be an ",(0,o.jsx)(s.code,{children:"import"}),". If you're using ",(0,o.jsx)(s.code,{children:"import"})," and Metro resolves as if you used ",(0,o.jsx)(s.code,{children:"require"}),", it's possible you have a custom Babel transform that's dropping the source mapping of your dependency - check your Babel configuration to see which transforms you're using."]})}),"\n",(0,o.jsx)(s.h2,{id:"summary-of-breaking-changes",children:"Summary of breaking changes"}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Package Exports resolution was introduced as an opt-in in Metro 0.76.1 and opt-out from Metro 0.82.0"}),". We will provide the option to disable it for several further releases, and have no plans to remove existing non-",(0,o.jsx)(s.code,{children:'"exports"'})," resolution behaviour."]})}),"\n",(0,o.jsxs)(s.p,{children:["Since Package Exports features overlap with existing React Native concepts (such as ",(0,o.jsx)(s.a,{href:"https://reactnative.dev/docs/platform-specific-code",children:"platform-specific extensions"}),"), and since ",(0,o.jsx)(s.code,{children:'"exports"'})," had been live in the npm ecosystem for some time, we reached out to the React Native community to make sure our implementation would meet developers' needs (",(0,o.jsx)(s.a,{href:"https://github.com/react-native-community/discussions-and-proposals/pull/534",children:"PR"}),", ",(0,o.jsx)(s.a,{href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0534-metro-package-exports-support.md",children:"final RFC"}),")."]}),"\n",(0,o.jsx)(s.p,{children:"This led us to create an implementation of Package Exports in Metro that is spec-compliant (necessitating some breaking changes), but backwards compatible otherwise (helping apps with existing imports to migrate gradually)."}),"\n",(0,o.jsxs)(s.h3,{id:"breaking-if-an-exports-match-is-found-it-is-preferred",children:["Breaking: If an ",(0,o.jsx)(s.code,{children:'"exports"'})," match is found, it is preferred"]}),"\n",(0,o.jsxs)(s.p,{children:["In common with other resolvers, the ",(0,o.jsx)(s.code,{children:"exports"})," field takes precedence over ",(0,o.jsx)(s.code,{children:"main"}),", etc. In some cases this will mean existing dependencies resolve differently (commonly, a package that previously resolved to a CommonJS version via ",(0,o.jsx)(s.code,{children:"main"})," could now resolve to an ESM version via ",(0,o.jsx)(s.code,{children:"exports"}),"), which changes the content of your bundle."]}),"\n",(0,o.jsx)(s.p,{children:"If the package author has not designed the newly-preferred implementation to work with Metro or React Native, this may appear as an issue at runtime."}),"\n",(0,o.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(s.p,{children:["If your dependency ",(0,o.jsx)(s.code,{children:"some-pkg"})," has the following ",(0,o.jsx)(s.code,{children:"package.json"})]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  "name": "some-pkg",\n  "version": "1.0.0",\n  "main": "./dist/cjs/index.js",\n  "exports": {\n    ".": {\n      "import": "./dist/esm/index.mjs",\n      "require": "./dist/cjs/index.js"\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(s.p,{children:["Metro would previously have bundled ",(0,o.jsx)(s.code,{children:"./dist/cjs/index.js"})," via ",(0,o.jsx)(s.code,{children:"main"}),". But now, if your code uses:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import Foo from 'some-pkg';\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Metro will bundle ",(0,o.jsx)(s.code,{children:"'./dist/esm/index.mjs'"})," via ",(0,o.jsx)(s.code,{children:"exports"}),", applying the ",(0,o.jsx)(s.code,{children:"import"})," condition."]}),"\n",(0,o.jsx)(s.p,{children:"If you write:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"const Foo = require('some-pkg');\n"})}),"\n",(0,o.jsxs)(s.p,{children:["It would (in this case, and commonly) apply the ",(0,o.jsx)(s.code,{children:"'require'"})," condition instead and resolve the same file as before ",(0,o.jsx)(s.code,{children:"exports"})," support."]}),"\n",(0,o.jsxs)(s.h3,{id:"breaking-match-exports-first-then-fall-back-to-legacy-resolution",children:["Breaking: Match ",(0,o.jsx)(s.code,{children:'"exports"'})," first, then fall back to legacy resolution"]}),"\n",(0,o.jsxs)(s.p,{children:["If present in a ",(0,o.jsx)(s.code,{children:"package.json"})," file, ",(0,o.jsx)(s.code,{children:'"exports"'})," will be the first field consulted when resolving a package."]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:'"exports"'})," will be used instead of any existing ",(0,o.jsx)(s.code,{children:'"react-native"'}),", ",(0,o.jsx)(s.code,{children:'"browser"'}),", or ",(0,o.jsx)(s.code,{children:'"main"'})," field \u2014\xa0or a file on disk at the same subpath (edge case)."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Fallback"}),": If the requested subpath is not matched in ",(0,o.jsx)(s.code,{children:'"exports"'}),", Metro will try to resolve it again, considering the above fields."]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Subpaths matched in ",(0,o.jsx)(s.code,{children:'"exports"'})," (including via ",(0,o.jsx)(s.a,{href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#subpath-patterns",children:"subpath patterns"}),") will use the exact target file path specified by a package."]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Metro will not expand ",(0,o.jsx)(s.a,{href:"/docs/configuration/#sourceexts",children:(0,o.jsx)(s.code,{children:"sourceExts"})})," against the import specifier."]}),"\n",(0,o.jsxs)(s.li,{children:["Metro will not resolve ",(0,o.jsx)(s.a,{href:"https://reactnative.dev/docs/platform-specific-code",children:"platform-specific extensions"})," against the target file."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Unchanged"}),": Metro will expand ",(0,o.jsx)(s.a,{href:"/docs/configuration#assetresolutions",children:"asset densities"})," (e.g. ",(0,o.jsx)(s.code,{children:"icon.png"})," \u2192 ",(0,o.jsx)(s.code,{children:"icon@2x.png"}),") if the target file ",(0,o.jsx)(s.a,{href:"/docs/configuration/#assetexts",children:"is an asset"}),"."]}),"\n"]}),"\n",(0,o.jsx)(s.h4,{id:"example-1",children:"Example"}),"\n",(0,o.jsxs)(s.p,{children:["For a package without an ",(0,o.jsx)(s.code,{children:'"exports"'})," field, Metro tries multiple potential file locations based on the import specifier:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import FooComponent from 'some-pkg/FooComponent';\n// Tries .[platform].js, .native.js, .js (+ TypeScript variants)\n"})}),"\n",(0,o.jsxs)(s.p,{children:["However, if ",(0,o.jsx)(s.code,{children:'"./FooComponent"'})," is listed in ",(0,o.jsx)(s.code,{children:'"exports"'}),", Metro matches the import specifier to this subpath, and uses the target file specified by the package with no further rules:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import FooComponent from 'some-pkg/FooComponent';\n// Resolves exact target from \"exports\" only\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["We have no plans to drop platform-specific extensions for packages not using ",(0,o.jsx)(s.code,{children:'"exports"'}),", or in app code."]})}),"\n",(0,o.jsx)(s.h3,{id:"breaking-import-specifiers-are-matched-exactly",children:"Breaking: Import specifiers are matched exactly"}),"\n",(0,o.jsxs)(s.p,{children:["Previously, import specifiers (the string given to ",(0,o.jsx)(s.code,{children:"import"})," or ",(0,o.jsx)(s.code,{children:"require()"}),") could be defined using both extensioned or extensionless paths. This is no longer the case for subpath keys in the ",(0,o.jsx)(s.code,{children:'"exports"'})," field."]}),"\n",(0,o.jsx)(s.h4,{id:"example-2",children:"Example"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  "name": "some-pkg",\n  "exports": {\n    "./FooComponent": "./src/FooComponent.js"\n  }\n}\n'})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'import FooComponent from \'some-pkg/FooComponent.js\';\n// Inaccessible unless the package had also listed "./FooComponent.js"\n// as an "exports" key\n'})}),"\n",(0,o.jsxs)(s.p,{children:["Note that this behaviour also applies for subpath patterns: ",(0,o.jsx)(s.code,{children:'"./*": "./src/*.js"'})," is distinct from ",(0,o.jsx)(s.code,{children:'"./*.js": "./src/*.js"'}),"."]}),"\n",(0,o.jsx)(s.h3,{id:"package-encapsulation-is-lenient",children:"Package encapsulation is lenient"}),"\n",(0,o.jsxs)(s.p,{children:["In Node.js, it is an error to import package subpaths that aren't explicitly listed in ",(0,o.jsx)(s.code,{children:'"exports"'}),". In Metro, we've decided to handle these errors leniently and resolve modules following the old behavior as necessary. This is intended to reduce user friction for previously allowed imports in existing Metro projects."]}),"\n",(0,o.jsx)(s.p,{children:"Instead of throwing an error, Metro will log a warning and fall back to file-based resolution."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sh",children:'warn: You have imported the module "foo/private/fn.js" which is not listed in\nthe "exports" of "foo". Consider updating your call site or asking the package\nmaintainer(s) to expose this API.\n'})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["We plan to implement a strict mode for package encapsulation in future, to align with Node's default behavior. ",(0,o.jsx)(s.strong,{children:"We recommend that all developers fix encapsulation warnings in their code"}),"."]})}),"\n",(0,o.jsx)(s.h2,{id:"migration-guide-for-package-maintainers",children:"Migration guide for package maintainers"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsxs)(s.strong,{children:["Adding an ",(0,o.jsx)(s.code,{children:'"exports"'})," field to your package is entirely optional"]}),". Existing package resolution features will behave identically for packages which don't use ",(0,o.jsx)(s.code,{children:'"exports"'})," \u2014 and we have no plans to remove this behaviour."]}),"\n",(0,o.jsxs)(s.h3,{id:"recommended-introducing-exports-is-a-breaking-change",children:["Recommended: Introducing ",(0,o.jsx)(s.code,{children:'"exports"'})," is a breaking change"]}),"\n",(0,o.jsxs)(s.p,{children:["The Node.js spec gives guidance on migrating to ",(0,o.jsx)(s.code,{children:'"exports"'})," in a non-breaking manner, however this is challenging in practice. For instance, if your React Native package uses ",(0,o.jsx)(s.a,{href:"https://reactnative.dev/docs/platform-specific-code",children:"platform-specific extensions"})," on its public exports, this is a breaking change by default."]}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:["To make the introduction of ",(0,o.jsx)(s.code,{children:'"exports"'})," non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package's public API is well-defined."]}),"\n",(0,o.jsxs)(s.p,{children:["\u2014\xa0",(0,o.jsx)(s.a,{href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#package-entry-points",children:"https://nodejs.org/docs/latest-v19.x/api/packages.html#package-entry-points"})]}),"\n"]}),"\n",(0,o.jsx)(s.h3,{id:"package-subpaths",children:"Package subpaths"}),"\n",(0,o.jsx)(s.admonition,{type:"caution",children:(0,o.jsxs)(s.p,{children:[(0,o.jsxs)(s.strong,{children:["Please do not rely on ",(0,o.jsx)(s.a,{href:"#package-encapsulation-is-lenient",children:"lenient package encapsulation"})," under Metro."]})," While Metro does this for backwards compatibility, packages should follow how ",(0,o.jsx)(s.code,{children:'"exports"'})," is documented in the spec and strictly implemented by other tools."]})}),"\n",(0,o.jsx)(s.h4,{id:"file-extensions-are-important",children:"File extensions are important!"}),"\n",(0,o.jsxs)(s.p,{children:["Each subpath is an exact specifier (",(0,o.jsx)(s.a,{href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0534-metro-package-exports-support.md#exact-path-specifiers",children:"see section in RFC"}),")."]}),"\n",(0,o.jsxs)(s.p,{children:["We recommend continuing to use ",(0,o.jsx)(s.strong,{children:"extensionless specifiers"})," for subpaths in packages targeting React Native \u2014\xa0or ",(0,o.jsx)(s.strong,{children:"defining both extensioned and extensionless specifiers"}),". This will match matching existing user expectations."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'  "exports": {\n    ".": "./src/index.js",\n    "./FooComponent": "./src/FooComponent.js",\n    "./FooComponent.js": "./src/FooComponent.js"\n  }\n'})}),"\n",(0,o.jsx)(s.h4,{id:"subpath-patterns-do-not-permit-expansion",children:"Subpath patterns do not permit expansion"}),"\n",(0,o.jsxs)(s.p,{children:["Subpath patterns are a shorthand for mapping multiple subpaths \u2014\xa0they do not permit path expansion (strictly a substring replacement), however will match nested directories (",(0,o.jsx)(s.a,{href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0534-metro-package-exports-support.md#subpath-patterns",children:"see section in RFC"}),")."]}),"\n",(0,o.jsxs)(s.p,{children:["Only one ",(0,o.jsx)(s.code,{children:"*"})," is permitted per side of a subpath pattern."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'  "exports": {\n    ".": "./index.js",\n    "./utils/*": "./utils/*.js"\n  }\n'})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"'pkg/utils/foo'"})," matches ",(0,o.jsx)(s.code,{children:"'pkg/utils/foo.js'"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"'pkg/utils/foo/bar'"})," matches ",(0,o.jsx)(s.code,{children:"'pkg/utils/foo/bar.js'"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"'pkg/utils/foo'"})," ",(0,o.jsx)(s.strong,{children:"does not match"})," ",(0,o.jsx)(s.code,{children:"'pkg/utils/foo.bar.js'"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(s.h3,{id:"replacing-browser-and-react-native-fields",children:["Replacing ",(0,o.jsx)(s.code,{children:'"browser"'})," and ",(0,o.jsx)(s.code,{children:'"react-native"'})," fields"]}),"\n",(0,o.jsxs)(s.p,{children:["We've introduced ",(0,o.jsx)(s.code,{children:'"react-native"'})," as a community condition (for use with conditional exports). This represents React Native, the framework, sitting alongside other recognised runtimes such as ",(0,o.jsx)(s.code,{children:'"node"'})," and ",(0,o.jsx)(s.code,{children:'"deno"'})," (",(0,o.jsx)(s.a,{href:"https://github.com/nodejs/node/pull/45367",children:"RFC"}),")."]}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsxs)(s.a,{href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#community-conditions-definitions",children:["Community Conditions Definitions \u2014\xa0",(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:'"react-native"'})})]})}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.em,{children:'Will be matched by the React Native framework (all platforms). To target React Native for Web, "browser" should be specified before this condition.'})}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["This replaces the previous ",(0,o.jsx)(s.code,{children:'"react-native"'})," root field. The priority order for how this was previously resolved was determined by projects, ",(0,o.jsx)(s.a,{href:"https://github.com/expo/router/issues/37#issuecomment-1275925758",children:"which created ambiguity when using React Native for Web"}),". Under ",(0,o.jsx)(s.code,{children:'"exports"'}),", ",(0,o.jsx)(s.em,{children:"packages concretely define the resolution order for conditional entry points"})," \u2014\xa0removing this ambiguity."]}),"\n",(0,o.jsx)(s.h4,{id:"example-use-conditional-exports-to-target-web-and-react-native",children:"Example: Use conditional exports to target web and React Native"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'  "exports": {\n    "browser": "./dist/index-browser.js",\n    "react-native": "./dist/index-react-native.js",\n    "default": "./dist/index.js"\n  }\n'})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["We chose not to introduce ",(0,o.jsx)(s.code,{children:'"android"'})," and ",(0,o.jsx)(s.code,{children:'"ios"'})," conditions, due to the prevalence of other existing platform selection methods, and the complexity of how this behavior might work across frameworks. We recommend the ",(0,o.jsx)(s.a,{href:"https://reactnative.dev/docs/platform#select",children:(0,o.jsx)(s.code,{children:"Platform.select()"})})," API instead."]})}),"\n",(0,o.jsx)(s.h3,{id:"replacing-platform-specific-extensions",children:"Replacing platform-specific extensions"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Breaking change"}),": Subpaths matched in ",(0,o.jsx)(s.code,{children:'"exports"'})," (including via ",(0,o.jsx)(s.a,{href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#subpath-patterns",children:"subpath patterns"}),") will use the exact file path specified by a package, and will not attempt to expand ",(0,o.jsx)(s.code,{children:"sourceExts"})," or platform-specific extensions."]}),"\n"]}),"\n",(0,o.jsxs)(s.h4,{id:"use-platformselect-react-native",children:["Use ",(0,o.jsx)(s.a,{href:"https://reactnative.dev/docs/platform#select",children:(0,o.jsx)(s.code,{children:"Platform.select()"})})," (React Native)"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'  "exports": {\n    "./FooComponent": "./src/FooComponent.js"\n  }\n'})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"// src/FooComponent.js\n\nconst FooComponent = Platform.select({\n  android: require('./FooComponentAndroid.js'),\n  ios: require('FooComponentIOS.js'),\n});\n\nexport default FooComponent;\n"})}),"\n",(0,o.jsx)(s.h3,{id:"asset-files",children:"Asset files"}),"\n",(0,o.jsxs)(s.p,{children:["As with source files, assets must be listed in ",(0,o.jsx)(s.code,{children:'"exports"'})," to be imported without warnings. Asset files with ",(0,o.jsx)(s.a,{href:"/docs/configuration#assetresolutions",children:"multiple densities"}),", e.g. ",(0,o.jsx)(s.code,{children:"icon.png"})," and ",(0,o.jsx)(s.code,{children:"icon@2x.png"}),", will continue to work without being listed individually."]}),"\n",(0,o.jsxs)(s.p,{children:["Using subpath patterns can be a convenient method to export many assets. We recommend specifying asset subpaths ",(0,o.jsx)(s.strong,{children:"with their file extension"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  "exports": {\n    "./assets/*.png": "./dist/assets/*.png"\n  }\n}\n'})}),"\n",(0,o.jsx)(s.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(s.h3,{id:"packageesm-incompatibilites",children:"Package/ESM incompatibilites"}),"\n",(0,o.jsx)(s.p,{children:"Some issues that can come from Metro resolving to a file not designed for React Native include:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsxs)(s.em,{children:['"',(0,o.jsx)(s.code,{children:"import.meta"}),' can not be used outside a module"']}),". ",(0,o.jsx)(s.code,{children:"import.meta"})," support is coming."]}),"\n",(0,o.jsxs)(s.li,{children:["Errors relating to ",(0,o.jsx)(s.code,{children:"document"})," or other web globals in your mobile app."]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["In these cases, ",(0,o.jsx)(s.strong,{children:"React Native developers"})," can:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Use ",(0,o.jsx)(s.code,{children:"require()"})," for that dependency to try to get the CommonJS version."]}),"\n",(0,o.jsxs)(s.li,{children:["Disable ",(0,o.jsx)(s.code,{children:"exports"})," support entirely by setting ",(0,o.jsx)(s.a,{href:"/docs/configuration/#unstable_enablepackageexports-experimental",children:(0,o.jsx)(s.code,{children:"resolver.unstable_enablePackageExports"})})," to ",(0,o.jsx)(s.code,{children:"false"})," in your Metro config."]}),"\n",(0,o.jsx)(s.li,{children:"(Advanced) use a custom resolver to tweak the behaviour for specific packages, see below."}),"\n"]}),"\n",(0,o.jsx)(s.h4,{id:"example-custom-resolver",children:"Example: Custom resolver"}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["Expo users should follow Expo-specific guidance in ",(0,o.jsx)(s.a,{href:"https://github.com/expo/expo/discussions/36551#discussion-8271245",children:"this GitHub discussion"})]})}),"\n",(0,o.jsxs)(s.p,{children:["For example, to follow the ",(0,o.jsx)(s.code,{children:"browser"})," condition for a particular dependency ",(0,o.jsx)(s.code,{children:"some-pkg"})," and its subpaths:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"// metro.config.js\nconst { getDefaultConfig, mergeConfig } = require('@react-native/metro-config');\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('@react-native/metro-config').MetroConfig}\n */\nconst config = {\n  resolver: {\n    resolveRequest: () => {\n      (context, moduleImport, platform) {\n        // Use the browser version of the package for React Native \n        if (moduleImport === 'some-pkg' || moduleImport.startsWith('some-pkg/')) {\n          return context.resolveRequest(\n            {\n              ...context,\n              unstable_conditionNames: ['browser'],\n              // Alternatively, disable exports for this package\n              // unstable_enablePackageExports: false\n            },\n            moduleImport,\n            platform,\n          );\n        }\n\n        // Fall back to normal resolution for everything else.\n        return context.resolveRequest(context, moduleImport, platform);\n    }\n  }\n};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);\n"})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Package maintainers"})," are recommended to use the ",(0,o.jsx)(s.code,{children:"react-native"})," condition to specify the best version of their package for React Native users. Note that this should appear above ",(0,o.jsx)(s.code,{children:"import"}),", ",(0,o.jsx)(s.code,{children:"require"})," or ",(0,o.jsx)(s.code,{children:"default"}),"."]}),"\n",(0,o.jsx)(s.h4,{id:"previous-metro-bugs",children:"Previous Metro bugs"}),"\n",(0,o.jsx)(s.p,{children:"Additionally, Metro bugs in earlier implementations may result in:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsxs)(s.em,{children:['"',(0,o.jsx)(s.code,{children:"_interopRequireDefault"}),' is not a function"']}),"."]}),"\n",(0,o.jsx)(s.li,{children:"Non-deterministic builds that may sometimes result in ESM-related errors."}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["These should be fixed in Metro 0.82.3 (for React Native 0.79) or Metro 0.81.5 (if opting in ",(0,o.jsx)(s.code,{children:"exports"})," support in older React Native versions)."]})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);