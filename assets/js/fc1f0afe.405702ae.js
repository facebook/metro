"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[3101],{38625:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api","title":"Bundling API","description":"Quick Start","source":"@site/../docs/API.md","sourceDirName":".","slug":"/api","permalink":"/docs/api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/metro/edit/main/docs/../docs/API.md","tags":[],"version":"current","lastUpdatedAt":1759158822000,"frontMatter":{"id":"api","title":"Bundling API"},"sidebar":"docs","previous":{"title":"Concepts","permalink":"/docs/concepts"},"next":{"title":"Module API","permalink":"/docs/module-api"}}');var i=r(74848),o=r(28453);const c={id:"api",title:"Bundling API"},d=void 0,t={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Reference",id:"reference",level:2},{value:"<code>loadConfig(&lt;options&gt;)</code>",id:"loadconfigoptions",level:3},{value:"<code>async runMetro(config)</code>",id:"async-runmetroconfig",level:3},{value:"<code>async runBuild(config, &lt;options&gt;)</code>",id:"async-runbuildconfig-options",level:3},{value:"<code>async runServer(config, &lt;options&gt;)</code>",id:"async-runserverconfig-options",level:3},{value:"<code>createConnectMiddleware(config, &lt;options&gt;)</code>",id:"createconnectmiddlewareconfig-options",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Compile a file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const config = await Metro.loadConfig();\n\nawait Metro.runBuild(config, {\n  entry: 'index.js',\n  out: 'bundle.js',\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run a server and watch the filesystem for changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const config = await Metro.loadConfig();\n\nawait Metro.runServer(config);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create a Connect middleware and plug it into a server"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const Metro = require('metro');\nconst express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\n\nMetro.loadConfig().then(async config => {\n  const connectMiddleware = await Metro.createConnectMiddleware(config);\n  const {server: {port}} = config;\n\n  app.use(connectMiddleware.middleware);\n  server.listen(port);\n  connectMiddleware.attachHmrServer(server);\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(n.p,{children:["All functions exposed below accept an additional ",(0,i.jsx)(n.code,{children:"config"})," option. This object should be the ",(0,i.jsx)(n.a,{href:"/docs/cli",children:"Metro configuration"})," exposed by your ",(0,i.jsx)(n.code,{children:"metro.config.js"})," file - you can obtain it using ",(0,i.jsx)(n.code,{children:"Metro.loadConfig"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"loadconfigoptions",children:(0,i.jsx)(n.code,{children:"loadConfig(<options>)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic options:"})," ",(0,i.jsx)(n.code,{children:"config"}),", ",(0,i.jsx)(n.code,{children:"cwd"})]}),"\n",(0,i.jsxs)(n.p,{children:["Load the Metro configuration, either from ",(0,i.jsx)(n.code,{children:"config"})," in options if specified, or by traversing the directory hierarchy from ",(0,i.jsx)(n.code,{children:"cwd"})," to the root until it finds a file (by default ",(0,i.jsx)(n.code,{children:"metro.config.js"}),"). The returned configuration will have been normalized and merged with Metro's default values."]}),"\n",(0,i.jsx)(n.h3,{id:"async-runmetroconfig",children:(0,i.jsx)(n.code,{children:"async runMetro(config)"})}),"\n",(0,i.jsx)(n.p,{children:"Creates a Metro server based on the config and returns it. You can use this as a middleware in your existing server."}),"\n",(0,i.jsx)(n.h3,{id:"async-runbuildconfig-options",children:(0,i.jsx)(n.code,{children:"async runBuild(config, <options>)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Required options:"})," ",(0,i.jsx)(n.code,{children:"entry"}),", ",(0,i.jsx)(n.code,{children:"out"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic options:"})," ",(0,i.jsx)(n.code,{children:"dev"}),", ",(0,i.jsx)(n.code,{children:"minify"}),", ",(0,i.jsx)(n.code,{children:"platform"}),", ",(0,i.jsx)(n.code,{children:"sourceMap"}),", ",(0,i.jsx)(n.code,{children:"sourceMapUrl"}),", ",(0,i.jsx)(n.code,{children:"assets"})]}),"\n",(0,i.jsxs)(n.p,{children:["Bundles ",(0,i.jsx)(n.code,{children:"entry"})," for the given ",(0,i.jsx)(n.code,{children:"platform"}),", and saves it to location ",(0,i.jsx)(n.code,{children:"out"}),". If ",(0,i.jsx)(n.code,{children:"sourceMap"})," is set, also generates a source map. The source map will be inlined, unless ",(0,i.jsx)(n.code,{children:"sourceMapUrl"})," is also defined. In the latter case, a new file will be generated with the basename of the ",(0,i.jsx)(n.code,{children:"sourceMapUrl"})," parameter. If ",(0,i.jsx)(n.code,{children:"assets"})," is ",(0,i.jsx)(n.code,{children:"true"}),", an array of ",(0,i.jsx)(n.code,{children:"AssetData"})," will be generated and returned in the ",(0,i.jsx)(n.code,{children:"assets"})," property of the result object."]}),"\n",(0,i.jsx)(n.h3,{id:"async-runserverconfig-options",children:(0,i.jsx)(n.code,{children:"async runServer(config, <options>)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic options:"})," ",(0,i.jsx)(n.code,{children:"host"}),", ",(0,i.jsx)(n.code,{children:"port"}),", ",(0,i.jsx)(n.code,{children:"secureServerOptions"}),", ",(0,i.jsx)(n.code,{children:"secure (DEPRECATED)"}),", ",(0,i.jsx)(n.code,{children:"secureKey (DEPRECATED)"}),", ",(0,i.jsx)(n.code,{children:"secureCert (DEPRECATED)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Starts a full Metro HTTP server. It will listen on the specified ",(0,i.jsx)(n.code,{children:"host:port"}),", and can then be queried to retrieve bundles for various entry points. If the ",(0,i.jsx)(n.code,{children:"secureServerOptions"})," family of options are present, the server will be exposed over HTTPS."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"secure"}),", ",(0,i.jsx)(n.code,{children:"secureKey"}),", ",(0,i.jsx)(n.code,{children:"secureCert"})," are now deprecated and will be removed in a later release. The presence of ",(0,i.jsx)(n.code,{children:"secureServerOptions"}),", along with its options will make Metro run over https."]}),"\n",(0,i.jsx)(n.h3,{id:"createconnectmiddlewareconfig-options",children:(0,i.jsx)(n.code,{children:"createConnectMiddleware(config, <options>)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic options:"})," ",(0,i.jsx)(n.code,{children:"port"}),", ",(0,i.jsx)(n.code,{children:"onBundleBuilt"})]}),"\n",(0,i.jsxs)(n.p,{children:["Instead of creating the full server, creates a Connect middleware that answers to bundle requests. This middleware can then be plugged into your own servers. The ",(0,i.jsx)(n.code,{children:"port"})," parameter is optional and only used for logging purposes. The ",(0,i.jsx)(n.code,{children:"onBundleBuilt"})," function is optional, is passed the bundle name, and is called when the server has finishing creating the bundle."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);